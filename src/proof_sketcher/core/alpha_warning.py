"""Alpha software warning utilities.

This module provides utilities for adding alpha software warnings
to all outputs to ensure users understand the experimental nature.
"""

import sys
from typing import Any

# Alpha version information
ALPHA_VERSION = "0.0.1-alpha1"
ISSUE_URL = "https://github.com/yourusername/proof-sketcher/issues"

ALPHA_WARNING = f"""
⚠️  ALPHA SOFTWARE - Output may be incorrect or incomplete
⚠️  Version: {ALPHA_VERSION}
⚠️  This is experimental software with known limitations
⚠️  Please report issues to: {ISSUE_URL}
"""

ALPHA_WARNING_SHORT = f"⚠️ ALPHA {ALPHA_VERSION} - Experimental software"

# CLI warning that appears on every command
CLI_ALPHA_WARNING = f"""
┌─ ALPHA SOFTWARE WARNING ─────────────────────────────────────────┐
│ This is experimental software (v{ALPHA_VERSION})                    │
│ • Output may be incorrect or incomplete                          │
│ • Many features are not fully implemented                        │
│ • Use at your own risk for testing purposes only                 │
│ • Report issues: {ISSUE_URL.ljust(40)} │
└───────────────────────────────────────────────────────────────────┘
"""


def add_alpha_warning(content: str) -> str:
    """Add alpha warning to content.

    Args:
        content: Original content

    Returns:
        Content with alpha warning prepended
    """
    return f"{ALPHA_WARNING}\n\n{content}"


def add_alpha_warning_html(content: str) -> str:
    """Add alpha warning to HTML content.

    Args:
        content: Original HTML content

    Returns:
        HTML with alpha warning banner
    """
    warning_html = f"""
<div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; margin: 20px 0; border-radius: 5px;">
    <h3 style="color: #856404; margin: 0 0 10px 0;">⚠️ Alpha Software Warning</h3>
    <p style="margin: 0; color: #856404;">
        This documentation was generated by experimental software (v{ALPHA_VERSION}). 
        Output may be incorrect or incomplete. 
        <a href="{ISSUE_URL}" style="color: #856404;">Report issues here</a>.
    </p>
</div>
"""
    # Insert warning after opening body tag or at the beginning
    if "<body>" in content:
        content = content.replace("<body>", f"<body>{warning_html}")
    else:
        content = warning_html + content

    return content


def add_alpha_warning_markdown(content: str) -> str:
    """Add alpha warning to Markdown content.

    Args:
        content: Original Markdown content

    Returns:
        Markdown with alpha warning
    """
    warning_md = f"""
> ⚠️ **Alpha Software Warning**  
> This documentation was generated by experimental software (v{ALPHA_VERSION}).  
> Output may be incorrect or incomplete.  
> [Report issues here]({ISSUE_URL})

"""
    return warning_md + content


def print_cli_warning() -> None:
    """Print CLI warning to stderr."""
    print(CLI_ALPHA_WARNING, file=sys.stderr)


def should_show_warning() -> bool:
    """Check if alpha warning should be shown.

    Can be disabled with PROOF_SKETCHER_NO_ALPHA_WARNING=1
    """
    import os

    return os.getenv("PROOF_SKETCHER_NO_ALPHA_WARNING") != "1"


class AlphaWarningMixin:
    """Mixin class to add alpha warnings to any output class."""

    def wrap_output(self, content: str, format_type: str = "text") -> str:
        """Wrap output with appropriate alpha warning.

        Args:
            content: Original content
            format_type: Output format (text, html, markdown)

        Returns:
            Content with alpha warning
        """
        if not should_show_warning():
            return content

        if format_type.lower() == "html":
            return add_alpha_warning_html(content)
        elif format_type.lower() == "markdown":
            return add_alpha_warning_markdown(content)
        else:
            return add_alpha_warning(content)


def get_alpha_status() -> dict[str, Any]:
    """Get alpha software status information.

    Returns:
        Dictionary with alpha status info
    """
    return {
        "version": ALPHA_VERSION,
        "is_alpha": True,
        "warning_enabled": should_show_warning(),
        "issue_url": ISSUE_URL,
        "limitations": [
            "Parser only handles simple Lean syntax",
            "Animation generation often fails",
            "Limited error handling",
            "Memory usage not optimized",
            "No production support",
        ],
    }
