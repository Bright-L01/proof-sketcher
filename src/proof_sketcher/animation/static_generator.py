"""Static diagram generator as fallback for animation.

This module generates static diagrams using matplotlib when
Manim is not available or fails.
"""

import logging
import textwrap
from pathlib import Path

import matplotlib.patches as patches
import matplotlib.pyplot as plt

from ..parser.models import TheoremInfo


class StaticDiagramGenerator:
    """Generate static diagrams as fallback."""

    def __init__(self):
        """Initialize static diagram generator."""
        self.logger = logging.getLogger(__name__)

    def generate_diagram(self, theorem: TheoremInfo, output_path: Path) -> Path:
        """Generate static diagram.

        Args:
            theorem: Theorem to visualize
            output_path: Path for output file

        Returns:
            Path to generated diagram
        """
        try:
            # Create figure with custom style
            try:
                plt.style.use("seaborn-v0_8-darkgrid")
            except OSError:
                # Fallback to default style if seaborn not available
                plt.style.use("default")
            fig, ax = plt.subplots(figsize=(10, 6))

            # Remove axes
            ax.set_xlim(0, 10)
            ax.set_ylim(0, 6)
            ax.axis("off")

            # Title box
            title_box = patches.FancyBboxPatch(
                (0.5, 4.5),
                9,
                1,
                boxstyle="round,pad=0.1",
                facecolor="lightblue",
                edgecolor="darkblue",
                linewidth=2,
            )
            ax.add_patch(title_box)

            # Add title text
            title_text = self._truncate_text(theorem.name, 40)
            ax.text(
                5,
                5,
                title_text,
                fontsize=20,
                weight="bold",
                ha="center",
                va="center",
                color="darkblue",
            )

            # Statement box
            statement_box = patches.FancyBboxPatch(
                (0.5, 1.5),
                9,
                2.5,
                boxstyle="round,pad=0.1",
                facecolor="lightyellow",
                edgecolor="orange",
                linewidth=1.5,
            )
            ax.add_patch(statement_box)

            # Wrap and add statement text
            statement_text = self._wrap_text(theorem.statement, 60)
            ax.text(
                5,
                2.75,
                statement_text,
                fontsize=12,
                ha="center",
                va="center",
                fontfamily="monospace",
                color="darkred",
            )

            # Add decorative elements
            self._add_decorations(ax)

            # Add metadata
            metadata_text = f"Generated by Proof Sketcher"
            ax.text(
                9.5,
                0.2,
                metadata_text,
                fontsize=8,
                ha="right",
                va="bottom",
                style="italic",
                color="gray",
            )

            # Save with high quality
            plt.tight_layout()
            output_path.parent.mkdir(parents=True, exist_ok=True)
            plt.savefig(
                output_path,
                dpi=150,
                bbox_inches="tight",
                facecolor="white",
                edgecolor="none",
            )
            plt.close()

            self.logger.info(f"Static diagram generated: {output_path}")
            return output_path

        except Exception as e:
            self.logger.error(f"Failed to generate static diagram: {e}")
            # Create a minimal fallback diagram
            return self._create_minimal_diagram(theorem, output_path)

    def _wrap_text(self, text: str, width: int) -> str:
        """Wrap text to specified width.

        Args:
            text: Text to wrap
            width: Maximum width in characters

        Returns:
            Wrapped text with newlines
        """
        # Clean and truncate text
        text = text.strip()
        if len(text) > 300:
            text = text[:297] + "..."

        # Wrap text
        lines = textwrap.wrap(text, width=width)

        # Limit to 5 lines
        if len(lines) > 5:
            lines = lines[:4]
            lines.append("...")

        return "\n".join(lines)

    def _truncate_text(self, text: str, max_length: int) -> str:
        """Truncate text to maximum length.

        Args:
            text: Text to truncate
            max_length: Maximum length

        Returns:
            Truncated text with ellipsis if needed
        """
        if len(text) <= max_length:
            return text
        return text[: max_length - 3] + "..."

    def _add_decorations(self, ax):
        """Add decorative elements to the diagram.

        Args:
            ax: Matplotlib axes object
        """
        # Add corner decorations
        corners = [(0.2, 0.2), (9.8, 0.2), (0.2, 5.8), (9.8, 5.8)]
        for x, y in corners:
            circle = patches.Circle(
                (x, y), 0.1, facecolor="gold", edgecolor="darkgoldenrod"
            )
            ax.add_patch(circle)

        # Add subtle grid pattern
        for i in range(1, 10):
            ax.axvline(i, color="lightgray", linestyle=":", alpha=0.3, linewidth=0.5)
        for i in range(1, 6):
            ax.axhline(i, color="lightgray", linestyle=":", alpha=0.3, linewidth=0.5)

    def _create_minimal_diagram(self, theorem: TheoremInfo, output_path: Path) -> Path:
        """Create minimal fallback diagram.

        Args:
            theorem: Theorem info
            output_path: Output path

        Returns:
            Path to created diagram
        """
        try:
            fig, ax = plt.subplots(figsize=(8, 4))
            ax.text(
                0.5,
                0.5,
                f"Theorem: {theorem.name}",
                ha="center",
                va="center",
                fontsize=16,
                transform=ax.transAxes,
            )
            ax.axis("off")
            plt.savefig(output_path, dpi=100, bbox_inches="tight")
            plt.close()
            return output_path
        except Exception:
            # Last resort - create empty file
            output_path.parent.mkdir(parents=True, exist_ok=True)
            output_path.touch()
            return output_path
