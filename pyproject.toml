[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "proof-sketcher"
version = "0.1.0"
description = "Transform Lean 4 theorems into natural language explanations with synchronized animations"
authors = [
    {name = "Bright Liu", email = "brightliu@college.harvard.edu"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.9"
keywords = ["lean", "theorem-proving", "documentation", "manim", "mathematics"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Mathematics",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "click>=8.0,<9.0",
    "pydantic>=2.0,<3.0",
    "rich>=13.0,<14.0",
    "jinja2>=3.1.6,<4.0",  # Security fix: GHSA-cpwx-vrp4-4pq7
    "PyYAML>=6.0,<7.0",
    "toml>=0.10,<1.0",
    "typing-extensions>=4.0,<5.0",
    "tenacity>=8.0,<9.0",
    "orjson>=3.8,<4.0",
    "aiofiles>=23.0,<24.0",
    "aiohttp>=3.8,<4.0",
    "jsonschema>=4.0,<5.0",
    "psutil>=5.9.0,<6.0",
    "Pillow>=11.3.0,<12.0",  # Security fix: PYSEC-2025-61
    "matplotlib>=3.7.0,<4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    # Security and code quality tools
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "semgrep>=1.45.0",
    "radon>=6.0.0",
    "xenon>=0.9.0",
    "vulture>=2.7.0",
    # Type stubs for better mypy support
    "types-PyYAML>=6.0.0",
    "types-toml>=0.10.0",
    "types-aiofiles>=23.0.0",
]

[project.scripts]
proof-sketcher = "proof_sketcher.cli:main"

[tool.setuptools.package-data]
proof_sketcher = [
    "parser/*.lean",
    "py.typed",
    "exporter/templates/**/*.jinja2",
    "exporter/templates/**/*.j2",
    "exporter/templates/**/*.css", 
    "exporter/templates/**/*.js",
    "exporter/templates/**/*.html",
]

[tool.setuptools.dynamic]
readme = {file = ["README.md"]}

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88
target-version = ['py39']

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = ["E", "F", "I", "N", "W", "B", "Q"]
ignore = ["E501", "B017", "N805", "F841", "W291"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
pretty = true

# Specific module configurations
[[tool.mypy.overrides]]
module = [
    "click.*",
    "rich.*",
    "jinja2.*",
    "yaml.*",
    "toml.*",
    "tenacity.*",
    "orjson.*",
    "aiofiles.*",
    "aiohttp.*",
    "jsonschema.*",
    "psutil.*",
    "PIL.*",
    "matplotlib.*",
]
ignore_missing_imports = true

# Allow some flexibility for tests
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]

# Security scanning with Bandit
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True (controlled usage)

# Code complexity analysis with Radon
[tool.radon]
cc_min = "A"
mi_min = "A"

# Dead code detection with Vulture
[tool.vulture]
min_confidence = 80
paths = ["src"]
ignore_names = ["_*", "test_*"]
