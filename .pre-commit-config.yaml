# Pre-commit hooks for Proof Sketcher
# Enforces quality standards on NEW code (Clean as You Code approach)
# Alpha software: Focus on preventing new debt, not fixing all existing issues

repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 24.4.2
    hooks:
      - id: black
        language_version: python3.10
        # Only check files that are staged
        stages: [commit]

  # Import sorting
  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: ["--profile", "black"]
        stages: [commit]

  # Remove trailing whitespace
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-json
      - id: check-toml
      - id: check-merge-conflict
      - id: debug-statements
      - id: mixed-line-ending

  # Basic Python checks
  - repo: https://github.com/PyCQA/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [
          "--max-line-length=88",
          "--extend-ignore=E203,W503",
          "--max-complexity=10"
        ]
        # Only warn, don't block commits in alpha
        verbose: true
        # Consider making this fail in the future:
        # fail_fast: false

  # Security checks for new code
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.8
    hooks:
      - id: bandit
        args: ["-ll", "--skip", "B101,B601,B602"]  # Skip known issues in alpha
        files: ^src/
        # Only scan new/modified files
        pass_filenames: true

  # Type checking (informational only in alpha)
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.10.0
    hooks:
      - id: mypy
        args: ["--ignore-missing-imports", "--no-error-summary"]
        additional_dependencies: [types-requests, types-pyyaml]
        # Don't fail on type errors in alpha
        pass_filenames: true
        verbose: true
        # Consider strict mode in future:
        # args: ["--strict"]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.41.0
    hooks:
      - id: markdownlint
        args: ["--fix"]
        # Relaxed rules for alpha
        files: ^(README|CONTRIBUTING|docs/).*\.md$

  # Check for secrets
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: .*\.lock$|package-lock\.json$

  # Commit message linting
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.27.0
    hooks:
      - id: commitizen
        stages: [commit-msg]

# Local hooks for project-specific checks
  - repo: local
    hooks:
      # Check for TODOs in new code
      - id: check-todos
        name: Check for TODOs in new code
        entry: bash -c 'git diff --cached --name-only | xargs grep -n "TODO\|FIXME\|HACK\|XXX" || true'
        language: system
        pass_filenames: false
        verbose: true

      # Ensure tests exist for new modules
      - id: check-test-coverage
        name: Check test files exist for new modules
        entry: python scripts/check_test_existence.py
        language: system
        files: ^src/.*\.py$
        pass_filenames: true

      # Alpha software notice
      - id: alpha-warning
        name: Alpha Software Warning
        entry: echo "⚠️  REMINDER This is ALPHA software with 11% test coverage and 69 security issues. New code must be high quality\!"
        language: system
        pass_filenames: false
        always_run: true

# Configuration
default_stages: [commit]
fail_fast: false  # Run all hooks even if one fails
verbose: true     # Show output from tools

# Installation:
# pip install pre-commit
# pre-commit install
# pre-commit install --hook-type commit-msg

# Manual run:
# pre-commit run --all-files

# Skip hooks (emergency only):
# git commit --no-verify

# Update hooks:
# pre-commit autoupdate