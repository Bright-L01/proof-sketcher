{# Math Macros for Lean 4 and Mathematical Notation #}
{# This template provides common mathematical macros and notation used across all formats #}

{# Common Mathematical Operators #}
{% macro defeq() -%}
{% if format == 'html' -%}
<span class="math-op">≝</span>
{%- elif format == 'markdown' -%}
≝
{%- elif format == 'latex' -%}
\coloneqq
{%- endif %}
{%- endmacro %}

{% macro implies() -%}
{% if format == 'html' -%}
<span class="math-op">→</span>
{%- elif format == 'markdown' -%}
→
{%- elif format == 'latex' -%}
\to
{%- endif %}
{%- endmacro %}

{% macro iff() -%}
{% if format == 'html' -%}
<span class="math-op">↔</span>
{%- elif format == 'markdown' -%}
↔
{%- elif format == 'latex' -%}
\leftrightarrow
{%- endif %}
{%- endmacro %}

{% macro forall() -%}
{% if format == 'html' -%}
<span class="math-quantifier">∀</span>
{%- elif format == 'markdown' -%}
∀
{%- elif format == 'latex' -%}
\forall
{%- endif %}
{%- endmacro %}

{% macro exists() -%}
{% if format == 'html' -%}
<span class="math-quantifier">∃</span>
{%- elif format == 'markdown' -%}
∃
{%- elif format == 'latex' -%}
\exists
{%- endif %}
{%- endmacro %}

{# Type Theory Notation #}
{% macro type_universe(level=0) -%}
{% if format == 'html' -%}
<span class="math-type">Type{% if level > 0 %}<sub>{{ level }}</sub>{% endif %}</span>
{%- elif format == 'markdown' -%}
Type{% if level > 0 %}_{{ level }}{% endif %}
{%- elif format == 'latex' -%}
\text{Type}{% if level > 0 %}_{{{ level }}}{% endif %}
{%- endif %}
{%- endmacro %}

{% macro prop() -%}
{% if format == 'html' -%}
<span class="math-type">Prop</span>
{%- elif format == 'markdown' -%}
Prop
{%- elif format == 'latex' -%}
\text{Prop}
{%- endif %}
{%- endmacro %}

{% macro sort() -%}
{% if format == 'html' -%}
<span class="math-type">Sort</span>
{%- elif format == 'markdown' -%}
Sort
{%- elif format == 'latex' -%}
\text{Sort}
{%- endif %}
{%- endmacro %}

{# Common Mathematical Structures #}
{% macro naturals() -%}
{% if format == 'html' -%}
<span class="math-set">ℕ</span>
{%- elif format == 'markdown' -%}
ℕ
{%- elif format == 'latex' -%}
\mathbb{N}
{%- endif %}
{%- endmacro %}

{% macro integers() -%}
{% if format == 'html' -%}
<span class="math-set">ℤ</span>
{%- elif format == 'markdown' -%}
ℤ
{%- elif format == 'latex' -%}
\mathbb{Z}
{%- endif %}
{%- endmacro %}

{% macro rationals() -%}
{% if format == 'html' -%}
<span class="math-set">ℚ</span>
{%- elif format == 'markdown' -%}
ℚ
{%- elif format == 'latex' -%}
\mathbb{Q}
{%- endif %}
{%- endmacro %}

{% macro reals() -%}
{% if format == 'html' -%}
<span class="math-set">ℝ</span>
{%- elif format == 'markdown' -%}
ℝ
{%- elif format == 'latex' -%}
\mathbb{R}
{%- endif %}
{%- endmacro %}

{% macro complexes() -%}
{% if format == 'html' -%}
<span class="math-set">ℂ</span>
{%- elif format == 'markdown' -%}
ℂ
{%- elif format == 'latex' -%}
\mathbb{C}
{%- endif %}
{%- endmacro %}

{# Lean 4 Specific Notation #}
{% macro lean_lambda(var, type='', body='') -%}
{% if format == 'html' -%}
<span class="lean-code">fun {{ var }}{% if type %} : {{ type }}{% endif %} => {{ body }}</span>
{%- elif format == 'markdown' -%}
`fun {{ var }}{% if type %} : {{ type }}{% endif %} => {{ body }}`
{%- elif format == 'latex' -%}
\texttt{fun {{ var }}{% if type %} : {{ type }}{% endif %} => {{ body }}}
{%- endif %}
{%- endmacro %}

{% macro lean_pi(var, type, result_type) -%}
{% if format == 'html' -%}
<span class="lean-code">({{ var }} : {{ type }}) → {{ result_type }}</span>
{%- elif format == 'markdown' -%}
`({{ var }} : {{ type }}) → {{ result_type }}`
{%- elif format == 'latex' -%}
\texttt{({{ var }} : {{ type }}) → {{ result_type }}}
{%- endif %}
{%- endmacro %}

{% macro lean_apply(func, args) -%}
{% if format == 'html' -%}
<span class="lean-code">{{ func }}{% for arg in args %} {{ arg }}{% endfor %}</span>
{%- elif format == 'markdown' -%}
`{{ func }}{% for arg in args %} {{ arg }}{% endfor %}`
{%- elif format == 'latex' -%}
\texttt{{{ func }}{% for arg in args %} {{ arg }}{% endfor %}}
{%- endif %}
{%- endmacro %}

{# Proof Tactics #}
{% macro tactic(name, args=[]) -%}
{% if format == 'html' -%}
<code class="tactic">{{ name }}{% if args %} {{ args | join(' ') }}{% endif %}</code>
{%- elif format == 'markdown' -%}
`{{ name }}{% if args %} {{ args | join(' ') }}{% endif %}`
{%- elif format == 'latex' -%}
\texttt{{{ name }}{% if args %} {{ args | join(' ') }}{% endif %}}
{%- endif %}
{%- endmacro %}

{% macro tactic_simp(args=[]) -%}
{{ tactic('simp', args) }}
{%- endmacro %}

{% macro tactic_rw(args=[]) -%}
{{ tactic('rw', args) }}
{%- endmacro %}

{% macro tactic_exact(term) -%}
{{ tactic('exact', [term]) }}
{%- endmacro %}

{% macro tactic_apply(theorem) -%}
{{ tactic('apply', [theorem]) }}
{%- endmacro %}

{% macro tactic_intro(vars=[]) -%}
{{ tactic('intro', vars) }}
{%- endmacro %}

{% macro tactic_cases(expr) -%}
{{ tactic('cases', [expr]) }}
{%- endmacro %}

{% macro tactic_induction(expr) -%}
{{ tactic('induction', [expr]) }}
{%- endmacro %}

{# Mathematical Constructs #}
{% macro function_def(name, domain, codomain, def='') -%}
{% if format == 'html' -%}
<div class="math-function">
  <span class="func-name">{{ name }}</span> : 
  <span class="func-domain">{{ domain }}</span> → 
  <span class="func-codomain">{{ codomain }}</span>
  {% if def %}
  <br><span class="func-def">{{ name }} := {{ def }}</span>
  {% endif %}
</div>
{%- elif format == 'markdown' -%}
**{{ name }}** : {{ domain }} → {{ codomain }}
{% if def %}

{{ name }} := {{ def }}
{% endif %}
{%- elif format == 'latex' -%}
\begin{align}
{{ name }} &: {{ domain }} \to {{ codomain }}{% if def %}\\
{{ name }} &:= {{ def }}{% endif %}
\end{align}
{%- endif %}
{%- endmacro %}

{% macro theorem_statement(name, statement, type='theorem') -%}
{% if format == 'html' -%}
<div class="theorem-stmt">
  <span class="theorem-type">{{ type }}</span>
  <span class="theorem-name">{{ name }}</span> : 
  <span class="theorem-prop">{{ statement }}</span>
</div>
{%- elif format == 'markdown' -%}
**{{ type|title }}** {{ name }} : {{ statement }}
{%- elif format == 'latex' -%}
\begin{{{ type }}}[{{ name }}]
{{ statement }}
\end{{{ type }}}
{%- endif %}
{%- endmacro %}

{# Proof Structure Macros #}
{% macro proof_begin() -%}
{% if format == 'html' -%}
<div class="proof-block">
  <div class="proof-header">Proof:</div>
  <div class="proof-content">
{%- elif format == 'markdown' -%}
**Proof:**

{%- elif format == 'latex' -%}
\begin{proof}
{%- endif %}
{%- endmacro %}

{% macro proof_end() -%}
{% if format == 'html' -%}
  </div>
  <div class="proof-qed">□</div>
</div>
{%- elif format == 'markdown' -%}

□
{%- elif format == 'latex' -%}
\end{proof}
{%- endif %}
{%- endmacro %}

{% macro proof_step(number, description, content) -%}
{% if format == 'html' -%}
<div class="proof-step" id="step-{{ number }}">
  <div class="step-number">{{ number }}.</div>
  <div class="step-content">
    <div class="step-description">{{ description }}</div>
    <div class="step-details">{{ content }}</div>
  </div>
</div>
{%- elif format == 'markdown' -%}
{{ number }}. **{{ description }}**
   
   {{ content | indent(3) }}

{%- elif format == 'latex' -%}
\step[{{ number }}]{{{ description }}}
{{ content }}
{%- endif %}
{%- endmacro %}

{# Citations and References #}
{% macro cite(key, page='') -%}
{% if format == 'html' -%}
<a href="#ref-{{ key }}" class="citation">[{{ key }}{% if page %}, p. {{ page }}{% endif %}]</a>
{%- elif format == 'markdown' -%}
[{{ key }}{% if page %}, p. {{ page }}{% endif %}](#ref-{{ key }})
{%- elif format == 'latex' -%}
\cite{% if page %}[p. {{ page }}]{% endif %}{{{ key }}}
{%- endif %}
{%- endmacro %}

{% macro bibitem(key, title, author, year, venue='') -%}
{% if format == 'html' -%}
<div class="bibitem" id="ref-{{ key }}">
  <span class="bib-key">[{{ key }}]</span>
  <span class="bib-author">{{ author }}</span>.
  <span class="bib-title">"{{ title }}"</span>.
  {% if venue %}<span class="bib-venue">{{ venue }}</span>,{% endif %}
  <span class="bib-year">{{ year }}</span>.
</div>
{%- elif format == 'markdown' -%}
**[{{ key }}]** {{ author }}. "{{ title }}". {% if venue %}{{ venue }}, {% endif %}{{ year }}.
{%- elif format == 'latex' -%}
\bibitem{{{ key }}} {{ author }}. {{ title }}. {% if venue %}{{ venue }}, {% endif %}{{ year }}.
{%- endif %}
{%- endmacro %}

{# Highlighting and Emphasis #}
{% macro highlight(text, type='important') -%}
{% if format == 'html' -%}
<mark class="highlight-{{ type }}">{{ text }}</mark>
{%- elif format == 'markdown' -%}
**{{ text }}**
{%- elif format == 'latex' -%}
\hl{{{ text }}}
{%- endif %}
{%- endmacro %}

{% macro definition(term, content) -%}
{% if format == 'html' -%}
<div class="definition">
  <div class="def-term">{{ term }}</div>
  <div class="def-content">{{ content }}</div>
</div>
{%- elif format == 'markdown' -%}
> **Definition ({{ term }})**: {{ content }}
{%- elif format == 'latex' -%}
\begin{definition}[{{ term }}]
{{ content }}
\end{definition}
{%- endif %}
{%- endmacro %}

{# Interactive Elements (HTML only) #}
{% macro toggle_proof(summary, content) -%}
{% if format == 'html' -%}
<details class="proof-toggle">
  <summary>{{ summary }}</summary>
  <div class="toggle-content">{{ content }}</div>
</details>
{%- elif format == 'markdown' -%}
<details>
<summary>{{ summary }}</summary>

{{ content }}

</details>
{%- else -%}
{{ summary }}

{{ content }}
{%- endif %}
{%- endmacro %}

{# Math rendering helpers #}
{% macro math_display(content) -%}
{% if format == 'html' -%}
<div class="math display">\\[{{ content }}\\]</div>
{%- elif format == 'markdown' -%}
$${{ content }}$$
{%- elif format == 'latex' -%}
\[{{ content }}\]
{%- endif %}
{%- endmacro %}

{% macro math_inline(content) -%}
{% if format == 'html' -%}
<span class="math inline">\\({{ content }}\\)</span>
{%- elif format == 'markdown' -%}
${{ content }}$
{%- elif format == 'latex' -%}
${{ content }}$
{%- endif %}
{%- endmacro %}

{# Lean 4 code blocks #}
{% macro lean_code(content, caption='') -%}
{% if format == 'html' -%}
<div class="lean-code-block">
  {% if caption %}<div class="code-caption">{{ caption }}</div>{% endif %}
  <pre><code class="language-lean">{{ content }}</code></pre>
</div>
{%- elif format == 'markdown' -%}
{% if caption %}*{{ caption }}*{% endif %}

```lean
{{ content }}
```
{%- elif format == 'latex' -%}
{% if caption %}\caption{{{ caption }}}{% endif %}
\begin{lstlisting}[language=lean]
{{ content }}
\end{lstlisting}
{%- endif %}
{%- endmacro %}

{# Theorem environments for different types #}
{% macro theorem_env(name, content, type='theorem') -%}
{% if format == 'html' -%}
<div class="theorem-env {{ type }}">
  <div class="theorem-header">
    <span class="theorem-type">{{ type|title }}</span>
    {% if name %}<span class="theorem-name">{{ name }}</span>{% endif %}
  </div>
  <div class="theorem-content">{{ content }}</div>
</div>
{%- elif format == 'markdown' -%}
> **{{ type|title }}{% if name %} ({{ name }}){% endif %}**: {{ content }}
{%- elif format == 'latex' -%}
\begin{{{ type }}}{% if name %}[{{ name }}]{% endif %}
{{ content }}
\end{{{ type }}}
{%- endif %}
{%- endmacro %}

{# Macro aliases for common theorem types #}
{% macro lemma(name, content) -%}
{{ theorem_env(name, content, 'lemma') }}
{%- endmacro %}

{% macro corollary(name, content) -%}
{{ theorem_env(name, content, 'corollary') }}
{%- endmacro %}

{% macro proposition(name, content) -%}
{{ theorem_env(name, content, 'proposition') }}
{%- endmacro %}

{# End of math_macros.j2 #}