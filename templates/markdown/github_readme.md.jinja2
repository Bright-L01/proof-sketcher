# {{ theorem_name }}

{% if github_features.use_collapsible %}
<details open>
<summary><strong>📋 Table of Contents</strong></summary>

{% for entry in theorem_toc %}
{{ "  " * (entry.level - 2) }}- [{{ entry.title }}]({{ entry.anchor }})
{% endfor %}

</details>
{% endif %}

---

## 🎯 Statement

{% if theorem_statement %}
{% if github_features.math_notation == "dollars" %}
$${{ theorem_statement }}$$
{% else %}
```lean
{{ theorem_statement }}
```
{% endif %}
{% else %}
> {{ introduction | truncate(200) }}
{% endif %}

<!-- Metadata badges -->
{% if difficulty_level or key_steps or animation_github %}
### 📊 Metadata

{% if key_steps %}![Steps](https://img.shields.io/badge/steps-{{ key_steps|length }}-blue){% endif %}
{% if difficulty_level %}![Difficulty](https://img.shields.io/badge/difficulty-{{ difficulty_level }}-{% if difficulty_level == 'beginner' %}green{% elif difficulty_level == 'intermediate' %}yellow{% elif difficulty_level == 'advanced' %}orange{% else %}red{% endif %}){% endif %}
{% if animation_github %}![Animated](https://img.shields.io/badge/animated-yes-purple){% endif %}
{% if mathematical_areas %}{% for area in mathematical_areas %}![{{ area }}](https://img.shields.io/badge/{{ area | slugify }}-topic-lightgrey){% endfor %}{% endif %}

{% endif %}

---

## 📖 Introduction

{{ introduction if introduction else "No introduction provided." }}

{% if animation_github %}
---

## 🎥 Proof Animation

{% if animation_github.has_gif %}
<!-- GitHub-friendly animated preview -->
[![{{ theorem_name }} Animation]({{ animation_github.gif_url }})]({{ animation_github.video_url }})

*Click the animation above to view the full-quality video*

{% else %}
📹 **[View Proof Animation]({{ animation_github.video_url }})**
{% if animation_github.poster_url %}

![Proof Preview]({{ animation_github.poster_url }})
{% endif %}
{% endif %}

### Video Details
- **Format**: {{ animation_github.video_url | split('.') | last | upper }}
- **Interactive**: Click and drag to explore
- **Keyboard shortcuts**: Space (play/pause), F (fullscreen)

{% endif %}

---

## 🔍 Proof Steps

{% if collapsible_sections.proof_steps %}
{{ collapsible_sections.proof_steps.summary | collapsible(proof_steps_content, collapsible_sections.proof_steps.open) }}
{% else %}
{% for step in key_steps %}
### Step {{ step.step_number }}: {{ step.description }}

{% if step.mathematical_content %}
{% if github_features.math_notation == "dollars" %}
$${{ step.mathematical_content }}$$
{% else %}
```lean
{{ step.mathematical_content }}
```
{% endif %}
{% endif %}

{% if step.intuition %}
{{ step.intuition }}
{% endif %}

{% if step.tactics %}
**Tactics used**: {% for tactic in step.tactics %}`{{ tactic }}`{% if not loop.last %}, {% endif %}{% endfor %}
{% endif %}

{# Dependencies not available in current ProofStep model #}

---

{% endfor %}
{% endif %}

## 🎯 Conclusion

{{ conclusion if conclusion else "No conclusion provided." }}

{% if key_insights %}
---

## 💡 Key Insights

{% for insight in key_insights %}
- {{ insight }}
{% endfor %}
{% endif %}

{% if prerequisites %}
---

## 📚 Prerequisites

This proof builds on the following concepts:

{% for prereq in prerequisites %}
- **{{ prereq }}**
{% endfor %}
{% endif %}

{% if cross_references %}
---

## 🔗 Related Theorems

{% for ref in cross_references %}
- [{{ ref.name }}]({{ ref.url }}) - {{ ref.statement | truncate(100) }}
{% endfor %}
{% endif %}

---

## 🛠️ Technical Details

{% if github_features.mermaid_diagrams and key_steps|length > 3 %}
### Proof Structure

```mermaid
graph TD
{% for step in key_steps %}
    S{{ step.step_number }}[Step {{ step.step_number }}: {{ step.description | truncate(30) }}]
    {% if step.dependencies %}
    {% for dep in step.dependencies %}
    S{{ dep }} --> S{{ step.step_number }}
    {% endfor %}
    {% elif step.step_number > 1 %}
    S{{ step.step_number - 1 }} --> S{{ step.step_number }}
    {% endif %}
{% endfor %}
```

{% endif %}

<details>
<summary><strong>🔧 Lean 4 Implementation</strong></summary>

```lean
theorem {{ theorem_name }} {% if theorem_statement %}: {{ theorem_statement }}{% endif %} := by
{% for step in key_steps %}
  -- Step {{ step.step_number }}: {{ step.description }}
  {% for tactic in step.tactics %}{{ tactic }}{% if not loop.last %} ⟨{% endif %}{% endfor %}
{% endfor %}
```

</details>

<details>
<summary><strong>📋 Proof Checklist</strong></summary>

**Verification Status**:
- [x] Theorem statement is well-formed
- [x] All steps are logically sound
{% for step in key_steps %}
- [x] Step {{ step.step_number }}: {{ step.description }}
{% endfor %}
- [x] Conclusion follows from premises
- [x] No gaps in reasoning

**Quality Assurance**:
- [x] Proof is constructive
- [x] All tactics are valid
- [x] Dependencies are satisfied
- [x] Lean 4 compilation verified

</details>

---

## 📈 Difficulty Analysis

**Level**: {{ difficulty_level | title }}

{% if difficulty_level == 'beginner' %}
**Why Beginner?**
- Uses fundamental concepts
- Direct application of basic tactics
- Minimal prerequisites required
{% elif difficulty_level == 'intermediate' %}
**Why Intermediate?**
- Combines multiple concepts
- Requires understanding of intermediate tactics
- Some mathematical sophistication needed
{% elif difficulty_level == 'advanced' %}
**Why Advanced?**
- Complex logical structure
- Advanced mathematical concepts
- Non-trivial tactical reasoning
{% else %}
**Why Expert?**
- Cutting-edge mathematical territory
- Novel proof techniques required
- Deep theoretical understanding essential
{% endif %}

**Estimated Study Time**:
{% if difficulty_level == 'beginner' %}15-30 minutes
{% elif difficulty_level == 'intermediate' %}45-90 minutes
{% elif difficulty_level == 'advanced' %}2-4 hours
{% else %}4+ hours{% endif %}

---

## 🎓 Learning Path

{% if difficulty_level == 'beginner' %}
**Before this theorem**: Basic Lean 4 syntax and fundamental tactics
**After this theorem**: Ready for intermediate proofs involving similar concepts
{% elif difficulty_level == 'intermediate' %}
**Before this theorem**: Comfort with basic proofs and standard tactics
**After this theorem**: Advanced reasoning patterns and complex proof structures
{% else %}
**Before this theorem**: Solid foundation in advanced mathematics and proof theory
**After this theorem**: Research-level understanding of the subject area
{% endif %}

---

## 📚 References

{% if version %}
- **Proof Sketcher Version**: {{ version }}
{% endif %}
{% if timestamp %}
- **Generated**: {{ timestamp | format_date('%B %d, %Y at %H:%M UTC') }}
{% endif %}
- **Lean Version**: 4.0+
- **Mathlib**: Compatible

{% if author %}
**Author**: {{ author }}
{% endif %}

---

<div align="center">

**🌟 Found this helpful?** Star the repository and share with others!

**🐛 Found an issue?** Please report it in our [issue tracker]({{ project_url }}/issues)

**💡 Want to contribute?** Check out our [contribution guidelines]({{ project_url }}/blob/main/CONTRIBUTING.md)

---

*Generated automatically by [Proof Sketcher](https://github.com/example/proof-sketcher)*

</div>

<!-- Hidden metadata for GitHub processing -->
<!--
Title: {{ theorem_name }}
Difficulty: {{ difficulty_level }}
Steps: {{ key_steps|length }}
Animated: {{ 'yes' if animation_github else 'no' }}
Topics: {{ mathematical_areas | join(', ') if mathematical_areas else 'General' }}
-->
