# Docker Compose for Proof Sketcher Development
# Alpha software CI/CD environment

version: '3.8'

services:
  # Main application service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: proof-sketcher:alpha
    container_name: proof-sketcher-app
    environment:
      - PYTHONUNBUFFERED=1
      - ALPHA_SOFTWARE=true
      - CI=${CI:-false}
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./examples:/app/examples:ro
      - ./output:/app/output
      - ./animations:/app/animations
      - ./cache:/app/cache
    command: python -m proof_sketcher --help
    networks:
      - proof-sketcher-net

  # Test runner service
  test:
    image: proof-sketcher:alpha
    container_name: proof-sketcher-test
    environment:
      - PYTHONUNBUFFERED=1
      - PYTEST_TIMEOUT=300
    volumes:
      - .:/app
      - ./htmlcov:/app/htmlcov
      - ./.hypothesis:/app/.hypothesis
    command: >
      bash -c "
        echo '=== Running Tests (Alpha Software - 11% coverage) ===' &&
        pytest tests/unit -v --cov=src --cov-report=html --cov-report=term ||
        echo 'Some tests failed - expected in alpha'
      "
    networks:
      - proof-sketcher-net

  # Code quality checker
  quality:
    image: proof-sketcher:alpha
    container_name: proof-sketcher-quality
    volumes:
      - .:/app
    command: >
      bash -c "
        echo '=== Code Quality Report (3,625 known issues) ===' &&
        echo '### Black Formatting' &&
        black --check --diff src || echo 'Formatting issues found' &&
        echo '### Flake8 Linting' &&
        flake8 src --count --statistics || echo 'Linting issues found' &&
        echo '### Type Checking' &&
        mypy src --ignore-missing-imports || echo 'Type issues found'
      "
    networks:
      - proof-sketcher-net

  # Security scanner
  security:
    image: proof-sketcher:alpha
    container_name: proof-sketcher-security
    volumes:
      - .:/app
    command: >
      bash -c "
        echo '=== Security Scan (69 known vulnerabilities) ===' &&
        bandit -r src -f json -o /app/bandit_report.json || 
        echo 'Security issues found - see bandit_report.json' &&
        safety check --json > /app/safety_report.json || 
        echo 'Dependency vulnerabilities found'
      "
    networks:
      - proof-sketcher-net

  # Documentation builder
  docs:
    image: proof-sketcher:alpha
    container_name: proof-sketcher-docs
    volumes:
      - ./docs:/app/docs
      - ./docs/_build:/app/docs/_build
    working_dir: /app/docs
    command: >
      bash -c "
        echo '=== Building Documentation ===' &&
        make clean &&
        make html || echo 'Documentation built with warnings'
      "
    networks:
      - proof-sketcher-net

  # SonarQube (optional - for local quality gates)
  sonarqube:
    image: sonarqube:community
    container_name: proof-sketcher-sonar
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_extensions:/opt/sonarqube/extensions
    networks:
      - proof-sketcher-net
    profiles:
      - full-stack

  # PostgreSQL for SonarQube
  postgres:
    image: postgres:13
    container_name: proof-sketcher-postgres
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - proof-sketcher-net
    profiles:
      - full-stack

networks:
  proof-sketcher-net:
    driver: bridge

volumes:
  sonarqube_data:
  sonarqube_logs:
  sonarqube_extensions:
  postgresql_data:

# Usage Examples:
# 
# Build all images:
#   docker-compose build
#
# Run tests:
#   docker-compose run --rm test
#
# Check code quality:
#   docker-compose run --rm quality
#
# Run security scan:
#   docker-compose run --rm security
#
# Build documentation:
#   docker-compose run --rm docs
#
# Run all checks (CI simulation):
#   docker-compose run --rm test && \
#   docker-compose run --rm quality && \
#   docker-compose run --rm security && \
#   docker-compose run --rm docs
#
# Start SonarQube (optional):
#   docker-compose --profile full-stack up -d sonarqube postgres
#   # Access at http://localhost:9000 (admin/admin)
#
# Clean up:
#   docker-compose down -v
EOF < /dev/null